name: Deployment Testing

on:
  workflow_run:
    workflows: ["Deploy to Cloudflare"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      frontend_url:
        description: 'Frontend URL to test'
        required: false
        default: ''
      backend_url:
        description: 'Backend URL to test'
        required: false
        default: ''

jobs:
  test-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd scripts && npm install axios

      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Run deployment tests
        env:
          FRONTEND_URL: ${{ github.event.inputs.frontend_url || format('https://{0}.pages.dev', github.event.repository.name) }}
          BACKEND_URL: ${{ github.event.inputs.backend_url || secrets.BACKEND_URL }}
        run: |
          echo "Testing frontend at: $FRONTEND_URL"
          echo "Testing backend at: $BACKEND_URL"
          node scripts/test-deployment.js

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-test-results
          path: deployment-test-report.json

      - name: Comment on PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('deployment-test-report.json', 'utf8'));
              const summary = report.summary;
              
              const comment = `## üöÄ Deployment Test Results
              
              **Summary:**
              - ‚úÖ Passed: ${summary.passed}
              - ‚ùå Failed: ${summary.failed}
              - ‚ö†Ô∏è Warnings: ${summary.warnings}
              - üìä Success Rate: ${summary.success_rate}%
              
              **Frontend URL:** ${process.env.FRONTEND_URL}
              **Backend URL:** ${process.env.BACKEND_URL}
              
              ${summary.failed > 0 ? '‚ùå Some tests failed. Please check the deployment.' : '‚úÖ All tests passed!'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read test report:', error.message);
            }

      - name: Fail if tests failed
        run: |
          if [ -f deployment-test-report.json ]; then
            FAILED=$(node -e "const report = require('./deployment-test-report.json'); console.log(report.summary.failed);")
            if [ "$FAILED" -gt "0" ]; then
              echo "Deployment tests failed"
              exit 1
            fi
          fi

  notify-slack:
    runs-on: ubuntu-latest
    needs: test-deployment
    if: always() && (success() || failure())
    steps:
      - name: Notify Slack on success
        if: needs.test-deployment.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '‚úÖ Deployment tests passed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.test-deployment.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Deployment tests failed. Please check the deployment.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}