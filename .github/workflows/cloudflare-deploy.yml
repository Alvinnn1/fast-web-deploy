name: Cloudflare Production Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/cloudflare-deploy.yml'

env:
  NODE_VERSION: '20'

jobs:
  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    name: Build and Deploy Frontend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: cloudflare-static-deployer
          directory: frontend/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: '3'

  deploy-workers:
    runs-on: ubuntu-latest
    name: Deploy Backend to Workers
    if: vars.DEPLOY_WORKERS == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build:workers

      - name: Deploy to Cloudflare Workers
        run: |
          cd backend
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  health-check:
    runs-on: ubuntu-latest
    needs: [build-and-deploy-frontend]
    name: Post-deployment Health Check
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check frontend deployment
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://luckyjingwen.top)
          if [ $response -ne 200 ]; then
            echo "Frontend health check failed with status: $response"
            exit 1
          fi
          echo "✅ Frontend deployment successful"

      - name: Check API health (if Workers deployed)
        if: vars.DEPLOY_WORKERS == 'true'
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.luckyjingwen.top/health)
          if [ $response -ne 200 ]; then
            echo "API health check failed with status: $response"
            exit 1
          fi
          echo "✅ API deployment successful"